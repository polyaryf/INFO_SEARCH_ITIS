import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞

# –°–ª–æ–≤–∞—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –∫–ª—é—á ‚Äî ID, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
documents = {
    0: "–õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ –∏ –ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ —Å–Ω—è–ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º",
    1: "–ú–∞—Ä–≥–æ –†–æ–±–±–∏ —Å—ã–≥—Ä–∞–ª–∞ –≥–ª–∞–≤–Ω—É—é —Ä–æ–ª—å –≤ –ë–∞—Ä–±–∏",
    2: "–ö–≤–µ–Ω—Ç–∏–Ω –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏",
    3: "–ë—Ä—ç–¥ –ü–∏—Ç—Ç –∏ –î–∂–æ—Ä–¥–∂ –ö–ª—É–Ω–∏ —Å–Ω–æ–≤–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ",
    4: "–û—Å–∫–∞—Ä –ø–æ–ª—É—á–∏–ª —Ñ–∏–ª—å–º –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä–∞ –ù–æ–ª–∞–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: —Å–ª–æ–≤–æ ‚Üí –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def build_inverted_index(docs):
    index = {}
    for doc_id, text in docs.items():
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ–≤–∞
        words = re.findall(r'\w+', text.lower())
        for word in set(words):  # set() ‚Äî —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã —Å–ª–æ–≤
            index.setdefault(word, set()).add(doc_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    return index

# –ë—É–ª–µ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏—è AND: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
def boolean_and(set1, set2):
    return set1 & set2

# –ë—É–ª–µ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏—è OR: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
def boolean_or(set1, set2):
    return set1 | set2

# –ë—É–ª–µ–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏—è NOT: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–∏–Ω—É—Å —Ç–µ, —á—Ç–æ –≤ set1
def boolean_not(set1, all_docs):
    return all_docs - set1

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
def evaluate_query(query, index, all_doc_ids):
    query = query.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–∫–µ–Ω—ã: —Å–ª–æ–≤–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Å–∫–æ–±–∫–∏
    tokens = re.findall(r'\w+|AND|OR|NOT|\(|\)', query)
    
    # –§—É–Ω–∫—Ü–∏—è: —Ç–æ–∫–µ–Ω ‚Üí –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    def token_to_set(token):
        if token in index:
            return index[token]         # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –∏–Ω–¥–µ–∫—Å–µ
        elif re.match(r'\w+', token):   # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ, –Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –∏–Ω–¥–µ–∫—Åe
            return set()                # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
        return token                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Å–∫–æ–±–∫–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å

    output = []  # –°—Ç–µ–∫ –¥–ª—è –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
    ops = []     # –°—Ç–µ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (AND, OR, NOT, —Å–∫–æ–±–∫–∏)

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: NOT > AND > OR
    precedence = {'NOT': 3, 'AND': 2, 'OR': 1}

    # –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–º–µ–Ω—è—é—â–∞—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–∑ —Å—Ç–µ–∫–∞
    def apply_op(op):
        if op == 'NOT':
            operand = output.pop()
            output.append(boolean_not(operand, all_doc_ids))
        else:
            right = output.pop()
            left = output.pop()
            if op == 'AND':
                output.append(boolean_and(left, right))
            elif op == 'OR':
                output.append(boolean_or(left, right))

    i = 0
    while i < len(tokens):
        token = tokens[i]
        if token == '(':  # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–¥—ë–º –Ω–∞ —Å—Ç–µ–∫
            ops.append(token)
        elif token == ')':  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ '('
            while ops and ops[-1] != '(':
                apply_op(ops.pop())
            ops.pop()  # –£–±–∏—Ä–∞–µ–º '('
        elif token.upper() in ('AND', 'OR', 'NOT'):  # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
            while ops and ops[-1] != '(' and precedence.get(ops[-1], 0) >= precedence[token.upper()]:
                apply_op(ops.pop())  # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            ops.append(token.upper())
        else:
            # –≠—Ç–æ —Å–ª–æ–≤–æ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–ª–∞–¥—ë–º –≤ —Å—Ç–µ–∫
            output.append(token_to_set(token))
        i += 1

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    while ops:
        apply_op(ops.pop())

    return output[0]  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø–æ–∏—Å–∫
def run_search_engine():
    # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    index = build_inverted_index(documents)
    all_doc_ids = set(documents.keys())

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AND, OR, NOT, —Å–∫–æ–±–∫–∏).")
    print("–ü—Ä–∏–º–µ—Ä: (–î–∏–ö–∞–ø—Ä–∏–æ AND –ë–∞—Ä–±–∏) OR –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ\n")

    while True:
        # –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_query = input("üîç –í–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ")
        if user_query.strip().lower() in ["–≤—ã—Ö–æ–¥", "quit", "exit"]:
            break  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ –∫–æ–º–∞–Ω–¥–µ

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            result = evaluate_query(user_query, index, all_doc_ids)
            if result:
                print("üîé –ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                for doc_id in sorted(result):
                    print(f"[{doc_id}] {documents[doc_id]}")
            else:
                print("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e)
        print()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    run_search_engine()
